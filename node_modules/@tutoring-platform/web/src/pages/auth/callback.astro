---
import Layout from '../../layouts/Layout.astro';
import { supabase } from '@tutoring-platform/supabase';
import { createUserProfile } from '../../lib/auth';

// URL 파라미터에서 코드 추출
const searchParams = Astro.url.searchParams;
const code = searchParams.get('code');
const error = searchParams.get('error');
const error_description = searchParams.get('error_description');

console.log('Callback URL:', Astro.url.toString());
console.log('Callback URL params:', Object.fromEntries(searchParams.entries()));
console.log('Supabase URL:', import.meta.env.PUBLIC_SUPABASE_URL);
console.log('Supabase client initialized:', !!supabase);

// 오류가 있는 경우 에러 페이지로 리다이렉트
if (error) {
  console.error('Auth error:', error, error_description);
  console.error('Error details:', {
    error,
    error_description,
    url: Astro.url.toString()
  });
  return Astro.redirect(`/auth/error?error=${encodeURIComponent(error_description || error)}`);
}

// 코드가 없는 경우 Supabase 세션 확인
if (!code) {
  console.log('No code provided, checking session...');
  
  try {
    console.log('Attempting to get session...');
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      console.error('Session error:', sessionError);
      console.error('Session error details:', {
        message: sessionError.message,
        status: sessionError.status,
        name: sessionError.name
      });
      return Astro.redirect('/auth/error?error=Session%20error');
    }
    
    console.log('Session data:', session);
    
    if (!session?.user) {
      console.error('No user in session');
      return Astro.redirect('/auth/error?error=No%20user%20in%20session');
    }
    
    // 사용자 프로필이 있는지 확인
    console.log('Checking user profile...');
    const { data: profile, error: profileError } = await supabase
      .from('users')
      .select('*')
      .eq('id', session.user.id)
      .single();
    
    if (profileError) {
      console.error('Profile error:', profileError);
      console.error('Profile error details:', {
        message: profileError.message,
        code: profileError.code,
        details: profileError.details
      });
    }
    
    console.log('Profile data:', profile);
    
    // 프로필이 없으면 생성
    if (!profile && !profileError) {
      try {
        console.log('Creating user profile...');
        await createUserProfile(
          session.user.id,
          session.user.email!,
          session.user.user_metadata.full_name || session.user.email!.split('@')[0]
        );
        console.log('User profile created successfully');
      } catch (createError) {
        console.error('Profile creation error:', createError);
        if (createError instanceof Error) {
          console.error('Profile creation error details:', {
            message: createError.message,
            name: createError.name,
            stack: createError.stack
          });
        }
        return Astro.redirect('/auth/error?error=Profile%20creation%20failed');
      }
    }
    
    // 대시보드로 리다이렉트
    console.log('Redirecting to dashboard...');
    return Astro.redirect('/dashboard');
  } catch (error) {
    console.error('Auth callback error:', error);
    if (error instanceof Error) {
      console.error('Auth callback error details:', {
        message: error.message,
        name: error.name,
        stack: error.stack
      });
    }
    return Astro.redirect('/auth/error?error=Authentication%20failed');
  }
}

// 코드가 있는 경우 기존 로직 실행
try {
  console.log('Exchanging code for session...');
  // 인증 코드를 세션으로 교환
  const { data: { session }, error: sessionError } = await supabase.auth.exchangeCodeForSession(code);
  
  if (sessionError) {
    console.error('Session exchange error:', sessionError);
    console.error('Session exchange error details:', {
      message: sessionError.message,
      status: sessionError.status,
      name: sessionError.name
    });
    return Astro.redirect(`/auth/error?error=${encodeURIComponent(sessionError.message)}`);
  }

  console.log('Session data:', session);
  
  if (!session?.user) {
    console.error('No user in session');
    return Astro.redirect('/auth/error?error=No%20user%20in%20session');
  }

  // 사용자 프로필이 있는지 확인
  console.log('Checking user profile...');
  const { data: profile, error: profileError } = await supabase
    .from('users')
    .select('*')
    .eq('id', session.user.id)
    .single();

  if (profileError) {
    console.error('Profile error:', profileError);
    console.error('Profile error details:', {
      message: profileError.message,
      code: profileError.code,
      details: profileError.details
    });
  }

  console.log('Profile data:', profile);

  // 프로필이 없으면 생성
  if (!profile && !profileError) {
    try {
      console.log('Creating user profile...');
      await createUserProfile(
        session.user.id,
        session.user.email!,
        session.user.user_metadata.full_name || session.user.email!.split('@')[0]
      );
      console.log('User profile created successfully');
    } catch (createError) {
      console.error('Profile creation error:', createError);
      if (createError instanceof Error) {
        console.error('Profile creation error details:', {
          message: createError.message,
          name: createError.name,
          stack: createError.stack
        });
      }
      return Astro.redirect('/auth/error?error=Profile%20creation%20failed');
    }
  }

  // 대시보드로 리다이렉트
  console.log('Redirecting to dashboard...');
  return Astro.redirect('/dashboard');
} catch (error) {
  console.error('Auth callback error:', error);
  if (error instanceof Error) {
    console.error('Auth callback error details:', {
      message: error.message,
      name: error.name,
      stack: error.stack
    });
  }
  return Astro.redirect('/auth/error?error=Authentication%20failed');
}
---

<Layout title="인증 처리 중">
  <main>
    <h1>인증 처리 중입니다</h1>
    <p>잠시만 기다려주세요...</p>
  </main>
</Layout> 